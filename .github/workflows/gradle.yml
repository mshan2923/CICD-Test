# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  IMAGENAME: boot-prac-cicd

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:dind
        options: --privileged # Security Problem

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17 #Github Actions에 보일 제목
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build

    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew

      # Log in to docker hub (replace 'username' and 'password' with your own)
    - name: Login to DockerHub Registry
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin


      # Build and push docker image (replace 'your-dockerhub-username' and 'your-image-name' with your own)
    - name : Build and Push Docker image
      run : |
        docker build . --tag ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGENAME }}:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGENAME }}:${{ github.sha }}

      # SSH into the EC2 instance and start the docker container (replace IP address and path-to-key.pem accordingly)
    - name : Deploy to AWS EC2
      uses : appleboy/ssh-action@master
      with :
        host : ${{ secrets.SERVER_IP }}
        username : ${{ secrets.SSH_USER }}
        key : ${{ secrets.SSH_PRIVATE_KEY }}
#        script_stop : true
#        script_timeout : 60m
        script : |
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGENAME }}:${{ github.sha }}
          docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGENAME }}:${{ github.sha }}
