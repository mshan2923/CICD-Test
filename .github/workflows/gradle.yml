# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  IMAGENAME: boot-prac-cicd

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:dind
        options: --privileged # Security Problem

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17 #Github Actions에 보일 제목
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build

    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker Image Build
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGENAME }} .

    - name: DockerHub Push
      run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGENAME }}

    - name : Deploy to AWS EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}

        script: |
          sudo docker rm -f $(sudo docker ps -aq)
          sudo docker rmi $(sudo docker images -q)
#         Remove All Container , Image

          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGENAME }}
#          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGENAME }}
          sudo docker run -p 8080:8080 \
                  -e SPRING_DATASOURCE_URL=${{secrets.DB_URL }} \
                  -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
                  -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
                  -d ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGENAME }}